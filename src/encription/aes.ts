import * as aes from 'aes-js';
import _randomBytes from 'randombytes';
import { Buffer } from "buffer";


const iv_size = 16

function randomBytes(size: number) {
    return _randomBytes(size)
}

/**
 * creates a random AES key
 */
function randomKey() {
    return randomBytes(32)
}


/**
 * AES encript data with a given key
 * @param data {string} - the data to encript
 * @param key{Buffer} - the key to encript with generated by ecdh
 */
function encript_aes(data: any, key: Buffer) {
    const iv = randomBytes(iv_size)
    const encryptor = new aes.ModeOfOperation.ctr(key, new aes.Counter(iv));
    return Buffer.concat([iv, encryptor.encrypt(data)])
}

/**
 * Decript an aes message encripted using `encirpt_aes`
 * @param input {AESData} the message
 * @param key {Buffer} - the key generated by ECDH
 */
function decript_aes(input: Buffer, key: Buffer) {
    const iv = input.subarray(0, iv_size);
    const data = input.subarray(iv_size);
    const decipher = new aes.ModeOfOperation.ctr(key, new aes.Counter(iv));
    return decipher.decrypt(data);
}

function create_aes_key() {
    return randomBytes(32)
}

export { encript_aes, decript_aes, create_aes_key, randomKey }