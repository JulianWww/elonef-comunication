import { createCipheriv, createDecipheriv, randomBytes } from "crypto";
import { Buffer } from "buffer";

const algorithm = "aes-256-cbc"

const iv_size = 16

/**
 * creates a random AES key
 */
function randomKey() {
    return randomBytes(32)
}


/**
 * AES encript data with a given key
 * @param data {string} - the data to encript
 * @param key{Buffer} - the key to encript with generated by ecdh
 */
function encript_aes(data: Buffer, key: Buffer) {
    var iv = randomBytes(16);

    const cypher = createCipheriv(algorithm, key, iv);

    let encipted = cypher.update(data);
    encipted = Buffer.concat([encipted, cypher.final()]);
    return Buffer.concat([
        Buffer.from(iv),
        encipted
    ])
}

/**
 * Decript an aes message encripted using `encirpt_aes`
 * @param input {AESData} the message
 * @param key {Buffer} - the key generated by ECDH
 */
function decript_aes(input: Buffer, key: Buffer) {
    const iv = input.subarray(0, iv_size);
    const data = input.subarray(iv_size);
    const decipher = createDecipheriv(algorithm, key, iv);
    let decrypted = decipher.update(data);
    decrypted = Buffer.concat([decrypted, decipher.final()]);
    return decrypted;
}

function create_aes_key() {
    return randomBytes(32)
}

export { encript_aes, decript_aes, create_aes_key, randomKey }