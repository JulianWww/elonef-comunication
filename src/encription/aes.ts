import _randomBytes from "randombytes";
import { Buffer } from "buffer";
import forge from "node-forge";


const iv_size = 16

/**
 * creates a random buffer of size size
 * @param size the size of the buffer
 * @returns random bytes
 */
function randomBytes(size: number) {
    return _randomBytes(size)
}

/**
 * creates a random AES key
 */
function randomKey() {
    return randomBytes(32)
}


/**
 * AES encript data with a given key
 * @param data {string} - the data to encript
 * @param key{Buffer} - the key to encript with generated by ecdh
 */
function encript_aes(data: any, key: Buffer) {
    const iv = randomBytes(iv_size);
    const cypher = forge.cipher.createCipher("AES-CBC", forge.util.createBuffer(key));
    cypher.start({iv: forge.util.createBuffer(iv)});
    cypher.update(forge.util.createBuffer(data));
    cypher.finish();
    const out = Buffer.concat([
        iv,
        Buffer.from(cypher.output.toHex(), "hex")
    ]);
    return out
}

/**
 * Decript an aes message encripted using `encirpt_aes`
 * @param input {AESData} the message
 * @param key {Buffer} - the key generated by ECDH
 */
function decript_aes(input: Buffer, key: Buffer) {
    const iv = input.subarray(0, iv_size);
    const data = input.subarray(iv_size);
    const cypher = forge.cipher.createDecipher("AES-CBC", forge.util.createBuffer(key));
    cypher.start({iv: forge.util.createBuffer(iv)});
    cypher.update(forge.util.createBuffer(data));
    cypher.finish();
    return Buffer.from(cypher.output.bytes())
}

export { encript_aes, decript_aes, randomKey, randomBytes }